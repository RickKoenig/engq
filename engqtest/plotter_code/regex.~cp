// non determinded finite state machine
#define REGEX

struct pstate {
	C8 chr;
	S32 next1; // -1 for no next
	S32 next2;
};

pstate pstates1[] = {
// (a*b+ac)d
	{'-', 5,-1}, // 0 // enter
	{'a', 2,-1}, // 1
	{'-', 3, 1}, // 2
	{'b', 4,-1}, // 3
	{'-', 8,-1}, // 4
	{'-', 6, 2}, // 5
	{'a', 7,-1}, // 6
	{'c', 8,-1}, // 7
	{'d', 9,-1}, // 8
	{'-',-1,-1}, // 9 // exit
};
//S32 npstates = SIZE(pstates);

pstate pstates2[] = {
// (ab+b)*+ab
	{'-', 5,-1}, // 0 // enter
	{'-', 2, 4}, // 1
	{'a', 3,-1}, // 2
	{'b', 5,-1}, // 3
	{'b', 5,-1}, // 4
	{'-', 1, 6}, // 5
	{'-', 7, 8}, // 6
	{'a', 9,-1}, // 7
	{'b', 9,-1}, // 8
	{'-',-1,-1}, // 9 // exit
};
//S32 npstates = SIZE(pstates);

// return first non matching char idx if matches, else return st if no match
S32 runsim(const pstate* ps,const C8* s,S32 si,bool whole = false)
{
	bool verbose = false; // verbose
	S32 sisv = si;
	if (verbose)
		logger("--------------------------\nrun sim with str '%s', start idx %d\n",s,si);
	//if (*s == '\0')
	//	return false;
	deque<S32> que;
	que.push_back(0); // 0, start state
	que.push_back(-1); // -1, scan token
	//S32 cur = 0;
	S32 match = si;
	S32 watch = 0;
	const S32 maxwatch = 1000;
	//S32 cc = 0; // current character
	while(true) {
		// show the que
		if (verbose) {
			S32 i;
			for (i=0;i<(S32)que.size();++i)
				logger("%2d ",que[i]);
			logger("\n");
		}
		// pop the front to get current state to process
		S32 curstate = que.front(); que.pop_front();
		// check current state
		if (curstate == -1) {
// it's a 'scan' token, not a state	
			if (que.empty()) {
				if (verbose)
					logger("deque empty, bad match, no next states to advance to at idx %d\n",si);
				break;
			}
			/*if (s[si] =='\0') { // never happens
				if (verbose)
					logger("EOF can't read char during 'scan' at idx %d\n",si);
				break;
			}*/
			if (verbose)
				logger("scanned '%c' at idx %d\n",s[si],si);
			++si; // advance to next char
			que.push_back(-1); // another 'scan' at the end
			continue;
		}
		const pstate& cps = ps[curstate];
		if (cps.next1 == -1) { 
// it's an 'exit' token, no next states
			if (whole) {
				// whole string here
				if (s[si]!='\0') {
					// not the whole string
					if (verbose) {
						logger("match but not whole string at idx %d, try other paths\n",si);
					}
					continue;
				} else {
					match = si; // we made it here
					if (verbose) {
						logger("successful whole match! at idx %d\n",si);
					}
				}
			} else { 
				// not whole string
				match = si; // we made it here
				if (verbose) {
					logger("successful match! at idx %d\n",si);
				}
			}
			break;
		}
		if (cps.chr == '-') {
// it's an 'or' token
			// push 1 or more choices to the front
			que.push_front(cps.next1);
			if (cps.next2 != -1)
				que.push_front(cps.next2);
		} else { 
// it's a 'char' token	
#if 0
			if (*s =='\0') {
				logger("EOF can't read char during 'char'\n");
				break;
			}
#endif
			// check for char match, if not then do nothing
			if (s[si] == cps.chr) {
				que.push_back(cps.next1); // after the 'scan'
			}
		}
		++watch;
		if (watch >= maxwatch) {
			logger("error: maxwatch exceeded %d\n",watch);
			break;
		}
	}
	if (!verbose) {
		if (match != sisv)
			if (whole)
				logger("--->>> run sim with str '%s' idx [%d,%d) whole matched!\n",s,sisv,match);
			else
				logger("--->>> run sim with str '%s' idx [%d,%d) matched!\n",s,sisv,match);
	}
	return match;
}

void doregextest()
{
	logger("###### start doing regextest\n");
#if 1
	// example regex1
	const pstate* pstates = pstates1;
	const S32 maxchar = 4;
	const S32 maxlen = 5;
#else
	// binary regex2
	const pstate* pstates = pstates2;
	const S32 maxchar = 2;
	const S32 maxlen = 5;
#endif
	S32 i,j,k;
	C8 test2[maxlen+1];
	const bool dowhole = false; // match end of char too.
	for (k=0;k<=maxlen;++k) {
		for (i=0;i<k;++i)
			test2[i] = 'a';
		test2[i] = '\0';
		if (k == 0) {
			//logger("test str (zero length) = '%s'\n",test2);
			runsim(pstates,test2,0,dowhole);
		} else {
			j = k - 1;
			while(j>=0) {
				//logger("test str = '%s'\n",test2);
				runsim(pstates,test2,0,dowhole);
				while(j>=0) {
					++test2[j];
					if (test2[j] == 'a' + maxchar) {
						test2[j] = 'a';
						--j;
					} else {
						j = k - 1;
						break;
					}
				}
			}
		}
	}
	C8 test1[] = "aabd";
	runsim(pstates,test1,0,dowhole);
	logger("###### end doing regextest\n");
}
