// The pixel shader, uses shadow mapper
// added, negative z/w check
ps_2_0

// interpolated inputs from vertex shader
dcl t0.xy		// texture uv
dcl_2d s0	// color sample from texture uv
dcl_2d s1	// light clip z/w sample from shadowmap texture uv
dcl t1.xyzw		// object position in light clip space
dcl t2.xyz		// normals

// constant inputs
// c1		// dir light 0, direction object space
// c2		// dir light 0, color
// c5		// amb light, colorc
// c6		// mat color
//def c8,0,0.001,0 // epsilon for z compare, in z
def c21,.5,-.5,1,1   // tex adjust mul
def c22,.5,.5,0,0    // tex adjust add
def c23,.5,.5,.5,1  // shadow
def c24,1,1,1,1		 // no shadow

// code
// r1.xyzw has 1/w in light clip space
	rcp r1,t1.w
// snag the z for later comparison
	mov r5.x,t1.z
	mov r5,r5.xxxx
// r0.xyz has true xyz in light clip space
	mul r0,r1,t1
// adjust r0.xy to fit on texture, x from -1 to 1 becomes 0 to 1, y from 1 to -1 becomes 0 to 1
	mul r0,c21,r0
	add r0,c22,r0
// get true z sample, 0 to 1
	texld r2,r0,s1
	mov r2.xyzw,r2.xxxx
	mov r0.xyzw,r0.zzzz
// add epsilon to z sample
	add r2,c8.zzzz,r2
// compare z's
	sub r2,r0,r2
//	mov r4,c24
//	cmp r3,r2,c23,r4
// z<0 check
//	cmp r3,r5,r3,c24
// get texture
//	texld r1,t0,s0
// mul material
//	mul r0,c6,r1
// mul shadow
//	mul r0,r3,r0
// and output final color
//	mov oC0,r0
	
// get normal into r4
	mov r4.xyz,t2 // get the interpolated normal
// normalized normal into r6
	nrm r6,r4 
// dot normal with light, clamp to 0 to 1, into r4
	dp3_sat r4.x, -r6, c1 
// multiply in lightdir 0 color to r6
	mul r6,c2,r4.xxxx
// add ambient
	add_sat r6,c5,r6
	mov r6.w,c24.x
// get ambient into c4
	mov r4,c5
	mov	r4.w,c24.x
	cmp r3,r2,r4,r6
//	mov r3,r6
// multiply in texture
	texld r1,t0,s0
	mul r1,r1,r3
// output final color
	mov oC0,r1

// outputs
// oC0 final pixel color

